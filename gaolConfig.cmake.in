include(CMakeFindDependencyMacro)
include(CheckCXXCompilerFlag)

# Capturing values from configure (optional)
#set(my-config-var @my-config-var@)

# Same syntax as find_package
#find_dependency(MYDEP REQUIRED)

# Any extra setup
find_package(mathlib REQUIRED)
if(mathlib_FOUND)
  message(STATUS "Found mathlib version ${mathlib_VERSION} in ${mathlib_DIR}")
endif()

if(MSVC)
  add_definitions(-D__GAOL_PUBLIC__=)
endif()

# TODO: check flags, definitions that should be added depending on options...

set(GAOL_ENABLE_DEBUG @GAOL_ENABLE_DEBUG@)
if(GAOL_ENABLE_DEBUG)
  check_cxx_compiler_flag("-ansi" COMPILER_SUPPORTS_ANSI)
  if(COMPILER_SUPPORTS_ANSI)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-ansi>)
  endif()
  check_cxx_compiler_flag("-Weffc++" COMPILER_SUPPORTS_WEFFCPP)
  if(COMPILER_SUPPORTS_WEFFCPP)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Weffc++>)
  endif()
  check_cxx_compiler_flag("-pedantic" COMPILER_SUPPORTS_PEDANTIC)
  if(COMPILER_SUPPORTS_PEDANTIC)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-pedantic>)
  endif()
endif()

set(GAOL_ENABLE_CPP11 @GAOL_ENABLE_CPP11@)
if(GAOL_ENABLE_CPP11)
  set(CMAKE_CXX_STANDARD 11 CACHE STRING "The C++ standard to use")
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  set(CMAKE_CXX_EXTENSIONS OFF)
endif()

set(GAOL_ENABLE_OPTIMIZE @GAOL_ENABLE_OPTIMIZE@)
if(GAOL_ENABLE_OPTIMIZE)
  check_cxx_compiler_flag("-funroll-loops" COMPILER_SUPPORTS_FUNROLL_LOOPS)
  if(COMPILER_SUPPORTS_FUNROLL_LOOPS)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-funroll-loops>)
  endif()
  check_cxx_compiler_flag("-fomit-frame-pointer" COMPILER_SUPPORTS_FOMIT_FRAME_POINTER)
  if(COMPILER_SUPPORTS_FOMIT_FRAME_POINTER)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fomit-frame-pointer>)
  endif()
  check_cxx_compiler_flag("-fexpensive-optimizations" COMPILER_SUPPORTS_FEXPENSIVE_OPTIMIZATIONS)
  if(COMPILER_SUPPORTS_FEXPENSIVE_OPTIMIZATIONS)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fexpensive-optimizations>)
  endif()
  check_cxx_compiler_flag("-fvisibility-inlines-hidden" COMPILER_SUPPORTS_FVISIBILITY_INLINES_HIDDEN)
  check_cxx_compiler_flag("-fvisibility=hidden" COMPILER_SUPPORTS_FVISIBILITY_HIDDEN)
  if((COMPILER_SUPPORTS_FVISIBILITY_INLINES_HIDDEN) AND (COMPILER_SUPPORTS_FVISIBILITY_HIDDEN))
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fvisibility-inlines-hidden>)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fvisibility=hidden>)
  endif()
endif()

set(GAOL_ENABLE_SIMD @GAOL_ENABLE_SIMD@)
if(GAOL_ENABLE_SIMD)
  check_cxx_compiler_flag("/arch:SSE2" COMPILER_SUPPORTS_ARCH_SSE2)
  if(COMPILER_SUPPORTS_ARCH_SSE2)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/arch:SSE2>)
  endif()
  check_cxx_compiler_flag("-xP" COMPILER_SUPPORTS_XP)
  check_cxx_compiler_flag("-mtune=pentium4" COMPILER_SUPPORTS_MTUNE_PENTIUM4)
  if((COMPILER_SUPPORTS_XP) AND (COMPILER_SUPPORTS_MTUNE_PENTIUM4))
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-xP>)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-mtune=pentium4>)
  endif()
  check_cxx_compiler_flag("-msse2" COMPILER_SUPPORTS_MSSE2)
  if(COMPILER_SUPPORTS_MSSE2)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-msse2>)
  endif()
  check_cxx_compiler_flag("-msse3" COMPILER_SUPPORTS_MSSE3)
  if(COMPILER_SUPPORTS_MSSE3)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-msse3>)
  endif()
endif()

# Add the targets file
include("${CMAKE_CURRENT_LIST_DIR}/gaolTargets.cmake")
